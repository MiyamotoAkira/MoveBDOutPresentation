* Move the DB Out

Production code thoughts.

* How it was done 
#+BEGIN_SRC clojure
(defn retrieve_car [car_id] 
  (retrieve_car_from_DB car_id))

(defn calculate_force [car_id]
  (let [car (retrieve_car car_id)]
    (* (:top_speed car) (:total_mass car))))

(defn estimate_damage [car_id cost_per_newton]
  (* (calculate_force car_id cost_per_newton))

#+END_SRC

* Code smell?
#+BEGIN_SRC clojure
(deftest some-test 
  (with-redefs [retrieve_car_from_db (fn [x] {:id "1" :top_speed "6" :total_mass "5"})]
    #test code
    (estimate_damage "FORDY" 50)
    #more test code))

#+END_SRC

* Changing the approach
#+BEGIN_SRC clojure
(defn retrieve_car [car_id] 
  (retrieve_car_from_db car_id))

(let [car (retrieve_car )]

  (defn calculate_force [car]
    (* (:top_speed car) (:total_mass car)))

  (defn estimate_damage [car]
    (* (calculate_force car) cost_per_newton)))

#+END_SRC

* How it was done 2
#+BEGIN_SRC clojure
(let [user (create-user "pepe")
      role (get-role "user")]

  (assign-role-to-user user role)
  (let [new-user (get-user "pepe")
        session (get-session "session1")]
    (get-user-in-session new-user session)))

#+END_SRC

* Code smell?

Lets upon Lets

* Changing the approach
#+BEGIN_SRC clojure
(-> (create-user "pepe")
    (assign-role-to-user (get-role "user"))
    (get-user-in-session (get-session "session1")))

#+END_SRC

* Next Steps?

Internalizing

* Functional Calisthenics

- Side effects can only occur at the top level
- No mutable state
- Expressions not statements
- Functions should have 1 argument
- No explicit recursion
- Maximum type-level abstraction
- Always use infinite sequences
- No "if"
- Name everything 
- Use intermediates
- Don't abbreviate

http://blog.ninjaferret.co.uk/2015/06/05/Introducing-Functional-Calisthenics.html

* That's All Folks

@yefoakira

http://twoormore.eu


@codurance

http://codurance.com
