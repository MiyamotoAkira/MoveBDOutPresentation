* The Setup

Previous experience with functional languages have been always really small pieces of code. I have used a few (more importantly Clojure, F# and Elixir).

I have had now the pleasure of experiencing working on production code on Clojure. As part of that work, a few things have occurred to me about how I was coding, the application. The most important is the realization that once I was developing the production system I was going back to my try and tested way of doing procedural or OO programming.

Will show two specific examples of what I am thinking was the wrong approach.


* BD access

** How it was done

#+BEGIN_SRC clojure
(defn retrieve_car [car_id] 
  (retrieve_car_from_DB car_id))

(defn calculate_force [car_id]
  (let [car (retrieve_car car_id)]
    (* (:top_speed car) (:total_mass car))))

(defn estimate_damage [car_id cost_per_newton]
  (* (calculate_force car_id cost_per_newton))

#+END_SRC

** Code smell: with-redefs

#+BEGIN_SRC clojure

(deftest some-test 
  (with-redefs [retrieve_car_from_db (fn [x] {:id "1" :top_speed "6" :total_mass "5"})]
    #test code
    (estimate_damage "FORDY" 50)
    #more test code))

#+END_SRC

I've started to consider the use of with-redefs as a possible code smell for Clojure. Why I am using with-redefs? How often? Is to mock access outside the program? Is it to avoid long calculations?

** The insight: Haskell and the IO Mondad

One of the languages that I looked (very briefly, I must say) was Haskell. Now you all know that Haskell is as pure as it can be. One of the elements to keep it pure is the use of the IO Monad. And there are better people than me to explain it, but one of the points is that every caller to a function that uses the IO Monad is itself an IO Monad function. If you don't want your full system to be IO functions then you have to restrict any IO output to the outside.

** Changing the approach

So there is a need to change the approach.

#+BEGIN_SRC clojure

(defn retrieve_car [car_id] 
  (retrieve_car_from_db car_id))

(let [car (retrieve_car )]

  (defn calculate_force [car]
    (* (:top_speed car) (:total_mass car)))

  (defn estimate_damage [car]
    (* (calculate_force car) cost_per_newton)))

#+END_SRC


* Lets usage and abuse

** How it was done

---- Can this be linked to C# Task<T>?
---- What about binding?

#+BEGIN_SRC clojure

(let [user (create-user "pepe")
      role (get-role "user")]

  (assign-role-to-user user role)
  (let [new-user (get-user "pepe")
        session (get-session "session1")]
    (get-user-in-session new-user session)))

#+END_SRC

** Code smell: Multiple lets

The issue here are those multiple lets. If I look at them, I don't see functional code. Where I see is imperative code disguised inside Clojure syntax.

** The insight: Functional Composition

Again, this insight comes from the time I was looking into Haskell, again. Because on any Haskell manual f(g(x)) is going to be present. Of course it does make sense, you avoid variables, which is what I have in there.

** Changing the approach

#+BEGIN_SRC clojure

(-> (create-user "pepe")
    (assign-role-to-user (get-role "user"))
    (get-user-in-session (get-session "session1")))

#+END_SRC


* Next Steps
So what are the next steps that I want to take to improve my functional code? As I mentioned, I think one of the issues that I have is that I have not yet internalized functional style enough.

The first setp is reading the book "Functional Patterns in Scala and Clojure". It has been on my reading list since McCarthy created Lisp. I think is the time to finish it. 

The second step is being more methodical on my exercises. In OOP we can use object calisthenics to force ourselves into the most narrow path to improve our ability to create OOP code. Maybe, there is something similar on functional programming (or maybe Haskell is the calisthenics of functional).
   
-----Functional calisthenics website
